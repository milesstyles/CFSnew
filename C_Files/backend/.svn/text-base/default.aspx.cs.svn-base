using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;

using System.Collections;
using System.Data;
using System.Data.Objects;
using System.Data.Objects.DataClasses;

using CfsNamespace;

public partial class _default : System.Web.UI.Page
{
    private CfsEntity CfsEntity;

    #region Page Events
    protected void Page_Load(object sender, EventArgs e)
    {
        grdViewWorkOrders.RowDataBound += new GridViewRowEventHandler(grdViewWorkOrders_RowDataBound);
        btnStaffNotes.Click += new EventHandler(btnStaffNotes_Click);

        if (!IsPostBack)
        {
            CfsCommon.GetStateListAbbr(ddlSearchLivesIn);
            CfsCommon.GetStateListAbbr(ddlSearchWorksIn);
            CfsCommon.GetTalentTypeList(ddlSearchTalType, true);
            CfsCommon.GetFullTalentList(ddlSearchFullPerformerList);
            CfsCommon.GetStateList(ddlSearchState);

            GetQuickRefTalentLists();
            LoadWorkOrderQuickViewOldSchool();
            GetPromoSpecialInfo();

            LoadStaffNotes();
        }
    }

    protected void OnClick_EmpQuickRefGoBtn(object sender, EventArgs e)
    {
        string buttonId = ((Button)sender).ID;
        string empId = "";

        /* Get the Employee ID, based on which 'GO' button was clicked */
        switch (buttonId)
        {
            case "btnFemaleDancerGo": empId = ddlFemaleDancer.SelectedValue; break;
            case "btnMaleDancerGo": empId = ddlMaleDancer.SelectedValue; break;
            case "btnFemaleMiniGo": empId = ddlFemaleMini.SelectedValue; break;
            case "btnMaleMiniGo": empId = ddlMaleMini.SelectedValue; break;
            case "bntBellyDanceGo": empId = ddlBellyDancer.SelectedValue; break;
            case "btnBbwGo": empId = ddlBbw.SelectedValue; break;
            case "btnDragQueenGo": empId = ddlDragQueen.SelectedValue; break;
            case "btnImpersonatorGo": empId = ddlImpersonator.SelectedValue; break;
            case "btnNoveltyActsGo": empId = ddlNoveltyActs.SelectedValue; break;
            case "btnDuoShowsGo": empId = ddlDuoShows.SelectedValue; break;
            case "btnDriversBouncersGo": empId = ddlDriversBouncers.SelectedValue; break;
            case "btnAffiliateGo": empId = ddlAffiliate.SelectedValue; break;
            default:
            {
                return; //No other Controls should call this function
            }
        }

        if (empId != "")
        {
            Response.Redirect("add_edit_employee.aspx?empid=" + empId);
        }
    }

    protected void OnClick_btnTalentSearchGo(object sender, EventArgs arrrggggs)
    {
        string talentType = ddlSearchTalType.SelectedValue;
        string talentLoc = ddlSearchLivesIn.SelectedValue;
        string talentWorks = ddlSearchWorksIn.SelectedValue;

        string redirUrl = "view_talent_search_results.aspx?search=true";
        
        if (talentType != "")
        {
            redirUrl += "&type=" + talentType;
        }
        if (talentLoc != "")
        {
            redirUrl += "&livesin=" + talentLoc;
        }
        if (talentWorks != "")
        {
            redirUrl += "&worksin=" + talentWorks;
        }
        
        Response.Redirect(redirUrl);
    }

    protected void OnClick_btnGetInactiveEmployees(object sender, EventArgs e)
    {
        Response.Redirect("view_talent_search_results.aspx?inactive=true");
    }

    protected void OnClick_btnSearchWorkOrder(object sender, EventArgs e)
    {
        string redirUrl = "view_work_orders.aspx?search=true";

        if (tBoxSearchWorkOrderNum.Text != "")
        {
            redirUrl += "&" + CfsCommon.PARAM_WO_SEARCH_WO_NUM + "=" + tBoxSearchWorkOrderNum.Text;
        }
        if (tBoxSearchFirstName.Text != "")
        {
            redirUrl += "&" + CfsCommon.PARAM_WO_SEARCH_FIRST_NAME + "=" + tBoxSearchFirstName.Text;
        }
        if (tBoxSearchLastName.Text != "")
        {
            redirUrl += "&" + CfsCommon.PARAM_WO_SEARCH_LAST_NAME + "=" + tBoxSearchLastName.Text;
        }
        if (tBoxSearchJobDate.Text != "")
        {
            redirUrl += "&" + CfsCommon.PARAM_WO_SEARCH_JOB_DATE + "=" + tBoxSearchJobDate.Text;
        }
        if (tBoxSearchLocation.Text != "")
        {
            redirUrl += "&" + CfsCommon.PARAM_WO_SEARCH_LOCATION + "=" + tBoxSearchLocation.Text;
        }
        if (tBoxSearchCity.Text != "")
        {
            redirUrl += "&" + CfsCommon.PARAM_WO_SEARCH_CITY + "=" + tBoxSearchCity.Text;
        }
        if (ddlSearchState.SelectedValue != "")
        {
            redirUrl += "&" + CfsCommon.PARAM_WO_SEARCH_STATE + "=" + ddlSearchState.SelectedValue;
        }
        if (tBoxSearchCcNum.Text != "")
        {
            redirUrl += "&" + CfsCommon.PARAM_WO_SEARCH_CCNUM + "=" + tBoxSearchCcNum.Text;
        }
        if (ddlSearchFullPerformerList.SelectedValue != "")
        {
            redirUrl += "&" + CfsCommon.PARAM_WO_SEARCH_TALID + "=" + ddlSearchFullPerformerList.SelectedValue;
        }
        if (tBoxSearchReferredBy.Text != "")
        {
            redirUrl += "&" + CfsCommon.PARAM_WO_SEARCH_REFER + "=" + tBoxSearchReferredBy.Text;
        }

        Response.Redirect(redirUrl, true);
    }

    protected void OnClick_btnViewWorkOrder(object sender, EventArgs e)
    {
        Button btn = (Button)sender;

        if (!string.IsNullOrEmpty(btn.CommandArgument))
        {
            Response.Redirect("view_job_info.aspx?" + CfsCommon.PARAM_JOB_ID + "=" + btn.CommandArgument);
        }
    }

    protected void OnClick_btnUpdatePromo(object sender, EventArgs e)
    {
        const string WEB_IMAGE_PATH = "~/images/promo/";
        string fileName = "";
        string path = Server.MapPath(WEB_IMAGE_PATH);

        CfsEntity cfsEntity = new CfsEntity();
        List<AppSetting> list;

        list = ((ObjectQuery<AppSetting>)cfsEntity.AppSetting.Where("it.SettingKey = '" + CfsCommon.APP_SETTING_KEY_PROMO_URL + "'")).ToList();
        if (list.Count == 1)
        {
            //Url Setting:
            list[0].SettingValue = tBoxPromoUrl.Text;
        }

        if (fuPromoImg.HasFile)
        {
            try
            {
                fileName = fuPromoImg.FileName;

                fuPromoImg.SaveAs(path + fileName);

                list = ((ObjectQuery<AppSetting>)cfsEntity.AppSetting.Where("it.SettingKey = '" + CfsCommon.APP_SETTING_KEU_PROMO_IMGSRC + "'")).ToList();
                if (list.Count == 1)
                {
                    //Img Setting
                    list[0].SettingValue = WEB_IMAGE_PATH + fileName;
                }
            }
            catch (Exception)
            {
                lblPromoFeedback.Text = "Error saving file.";
                return;
            }
        }

        if (cfsEntity.SaveChanges() > 1)
        {
            lblPromoFeedback.Text = "Updated Successfully.";
        }

        GetPromoSpecialInfo();
    }

    protected void btnStaffNotes_Click(object sender, EventArgs e)
    {
        CfsEntity ent = new CfsEntity();
        StaffNote note = new StaffNote();
        note.Text = tbStaffNotes.Text;
        note.Date = DateTime.Now;
        note.UserId = (int)Session[CfsCommon.SESSION_KEY_USERID];

        ent.AddToStaffNote(note);
        ent.SaveChanges();

        LoadStaffNotes();
    }

    #endregion

    #region Callbacks
    void grdViewWorkOrders_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        if (e.Row == null || e.Row.DataItem == null) { return; }

        DataRowView dRowView = (DataRowView)e.Row.DataItem;
        
        if( CfsEntity == null )
        {
            CfsEntity = new CfsEntity();
        }

        Job theJob = CfsCommon.GetJobRecord(CfsEntity, dRowView["JobId"].ToString() );

        if (!theJob.TalentToJob.IsLoaded)
        {
            theJob.TalentToJob.Load();
        }

        if (theJob.TalentToJob.Count > 0)
        {
            e.Row.Cells[4].Text = theJob.TalentToJob.Min(st => st.StartDateTime).ToString("h:mm tt");

            Image imgHasTalent =  (Image)e.Row.FindControl("imgHasTalent");
            
            if( imgHasTalent != null )
            {
                imgHasTalent.Visible = true;                
            }
        }
    }
    #endregion

    private void GetQuickRefTalentLists()
    {
        CfsCommon.GetSingleTalentList(ddlFemaleDancer, CfsCommon.TALENT_TYPE_ID_FEMALE);
        CfsCommon.GetSingleTalentList(ddlMaleDancer, CfsCommon.TALENT_TYPE_ID_MALE);
        CfsCommon.GetSingleTalentList(ddlFemaleMini, CfsCommon.TALENT_TYPE_ID_FEMALE_MINI);
        CfsCommon.GetSingleTalentList(ddlMaleMini, CfsCommon.TALENT_TYPE_ID_MALE_MINI);
        CfsCommon.GetSingleTalentList(ddlBellyDancer, CfsCommon.TALENT_TYPE_ID_BELLY_DANCER);
        CfsCommon.GetSingleTalentList(ddlBbw, CfsCommon.TALENT_TYPE_ID_BBW);
        CfsCommon.GetSingleTalentList(ddlDragQueen, CfsCommon.TALENT_TYPE_ID_DRAG);
        CfsCommon.GetSingleTalentList(ddlImpersonator, CfsCommon.TALENT_TYPE_ID_IMPERSON);
        CfsCommon.GetSingleTalentList(ddlNoveltyActs, CfsCommon.TALENT_TYPE_ID_NOVELTY);
        CfsCommon.GetSingleTalentList(ddlDuoShows, CfsCommon.TALENT_TYPE_ID_DUO);
        CfsCommon.GetSingleTalentList(ddlDriversBouncers, CfsCommon.TALENT_TYPE_ID_DRIVER);
        CfsCommon.GetSingleTalentList(ddlAffiliate, CfsCommon.TALENT_TYPE_ID_AFFILIATE);
    }

    private void LoadWorkOrderQuickViewOldSchool()
    {
        /* Have to use the old method for now, until we figure out how to w/ Entities */
        string conn = System.Configuration.ConfigurationManager.ConnectionStrings["CenterfoldConn"].ConnectionString;
        string select;

        select = "SELECT c.FirstName, c.LastName, e.EventDate, e.LocationName, e.StartTime, j.JobId, j.IsJobCancelled, j.TotalShowLengthMins, min(tj.StartDateTime) ";
        select += "FROM Customer c JOIN Event e on c.CustomerId = e.CustomerId ";
        select += "JOIN Job j on e.EventId = j.EventId ";
        select += "LEFT OUTER JOIN TalentToJob tj on j.JobId = tj.JobId ";
        select += "WHERE e.EventDate >= '" + DateTime.Now.ToString("MM/dd/yyyy") + " 12:00 AM' ";
        select += "AND e.EventDate <= '" + CfsCommon.GetEndOfCurrentWeek() + "' ";
        select += "AND j.IsJobCancelled = 0 ";
        select += "AND (j.IsBalanceCollected = 0 OR j.IsJobComplete = 0)";
        select += "GROUP BY c.FirstName, c.LastName, e.EventDate, e.LocationName, e.StartTime, j.JobId, j.IsJobCancelled, j.TotalShowLengthMins ORDER BY e.EventDate ASC, min(tj.StartDateTime) ASC;";


        SqlDataSource dataSrc = new SqlDataSource(conn, select);

        //try
        {
            grdViewWorkOrders.DataSource = dataSrc;
            grdViewWorkOrders.DataBind();
        }
        //catch (Exception)
        {

        }
    }

    /* Gets the Hyperlink and Image for the 'Promo Specials' box (line 26-ish) */
    private void GetPromoSpecialInfo()
    {
        CfsEntity cfsEntity = new CfsEntity();

        foreach (AppSetting setting in cfsEntity.AppSetting)
        {
            if (setting.SettingKey == CfsCommon.APP_SETTING_KEY_PROMO_URL)
            {
                tBoxPromoUrl.Text = setting.SettingValue;
            }
            if (setting.SettingKey == CfsCommon.APP_SETTING_KEU_PROMO_IMGSRC)
            {
                imgPromo.ImageUrl = setting.SettingValue;
            }
        }
    }

    private void LoadStaffNotes()
    {
        CfsEntity cfsEntity = new CfsEntity();

        StaffNote note = null;
        try
        {
            note = cfsEntity.StaffNote.OrderBy("it.Date DESC").First();
        }
        catch
        {
        }

        if (note != null)
        {
            tbStaffNotes.Text = note.Text;
        }
    }


}
